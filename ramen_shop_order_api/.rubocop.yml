########################################################################
# Rubocopはコーディング規約に準拠してるかチェックするものです
# ルールを変更したい場合は、このファイルに変更を加えてPullRequestをあげてください

require:
  #  - rubocop-rails
  - rubocop-performance
  - rubocop-rspec

AllCops:
  TargetRubyVersion: 2.6
  DisabledByDefault: true

############ i3-systemsで追加/変更したルール ############
# 日本語でのコメントを許可する
Style/AsciiComments:
  Enabled: false

# CONSTは必ずfreezeさせる
# @see https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MutableConstant
Style/MutableConstant:
  Enabled: true

# if some_var = true をつかう場合は == と間違えている可能性があるので if (some_var = true) にする
# @see https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/AssignmentInCondition
Lint/AssignmentInCondition:
  Enabled: true

# Blockの end の位置をあわせる
# @see https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/BlockAlignment
Layout/BlockAlignment:
  Enabled: true

# hashのkeyが重複しているかをチェック
# @see https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DuplicateHashKey
Lint/DuplicateHashKey:
  Enabled: true

# 未使用の引数をチェック
# @see https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UnusedBlockArgument
Lint/UnusedBlockArgument:
  Enabled: true

# ガード句に置き換えることが可能な場合警告する
# @see https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/GuardClause
Style/GuardClause:
  Enabled: true

# 冗長なselfをチェック
# @see https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantSelf
Style/RedundantSelf:
  Enabled: true

# symbol procが使えるかチェック ( something.map(&:upcase) )
# @see https://www.rubydoc.info/gems/rubocop/0.26.1/RuboCop/Cop/Style/SymbolProc
Style/SymbolProc:
  Enabled: true

###################################################
### rubocop: https://docs.rubocop.org/en/latest/cops/
### rubocop-rails: https://docs.rubocop.org/projects/rails/en/latest/cops/
###
### rubocop本家はCopが多いため、比較的ゆるいRailsリポジトリのrubocop.ymlも参考に。
### https://github.com/rails/rails/blob/master/.rubocop.yml
###

Performance:
  Exclude:
    - "**/test/**/*"

# Prefer &&/|| over and/or.
Style/AndOr:
  Enabled: true

# Align `when` with `case`.
Layout/CaseIndentation:
  Enabled: true

# Align comments with method definitions.
Layout/CommentIndentation:
  Enabled: true

Layout/ElseAlignment:
  Enabled: true

# Align `end` with the matching keyword or starting expression except for
# assignments, where it should be aligned with the LHS.
Layout/EndAlignment:
  Enabled: true
  AutoCorrect: true

# frozen_string_literal: true の直後に空行を入れる。
# FrozenStringLiteralCommentを有効にするならこれもセットで。
Layout/EmptyLineAfterMagicComment:
  Enabled: true

# private などは前後に空行を必要とする
Layout/EmptyLinesAroundAccessModifier:
  Enabled: true

Layout/EmptyLinesAroundBlockBody:
  Enabled: true

# In a regular class definition, no empty lines around the body.
Layout/EmptyLinesAroundClassBody:
  Enabled: true

# In a regular method definition, no empty lines around the body.
Layout/EmptyLinesAroundMethodBody:
  Enabled: true

# In a regular module definition, no empty lines around the body.
Layout/EmptyLinesAroundModuleBody:
  Enabled: true

Layout/FirstArgumentIndentation:
  Enabled: false

# Use Ruby >= 1.9 syntax for hashes. Prefer { a: :b } over { :a => :b }.
Style/HashSyntax:
  Enabled: true

# Method definitions after `private` or `protected` isolated calls need one
# extra level of indentation.
Layout/IndentationConsistency:
  Enabled: true
  EnforcedStyle: normal
# indented_internal_methods じゃない書き方が数多くされているし、Rails流を強制する強い理由はないため、normalに変更
#
# normal:
#
#   private
#   def hoge
#     ...
#   end
#
# indented_internal_methods:
#
#   private
#     def hoge
#       ...
#     end
#
#    ↑１段階インデント

# Two spaces, no tabs (for indentation).
Layout/IndentationWidth:
  Enabled: true

Layout/LeadingCommentSpace:
  Enabled: true

# あまりに行が横に長いとPull Requestレビューに支障が出るため制限する
Layout/LineLength:
  Max: 140 # Pull Requestレビュー画面の横幅を目安に、とりあえず140に設定

Layout/SpaceAfterColon:
  Enabled: true

Layout/SpaceAfterComma:
  Enabled: true

Layout/SpaceAfterSemicolon:
  Enabled: true

Layout/SpaceAroundEqualsInParameterDefault:
  Enabled: true

Layout/SpaceAroundKeyword:
  Enabled: true

# bad: { :a=>b }
# good: { :a => b }
Layout/SpaceAroundOperators:
  Enabled: true

Layout/SpaceBeforeComma:
  Enabled: true

Layout/SpaceBeforeComment:
  Enabled: true

Layout/SpaceBeforeFirstArg:
  Enabled: true

Style/DefWithParentheses:
  Enabled: true

# Defining a method with parameters needs parentheses.
Style/MethodDefParentheses:
  Enabled: true

Style/FrozenStringLiteralComment:
  Enabled: true
  EnforcedStyle: always
  Exclude:
    - "actionview/test/**/*.builder"
    - "actionview/test/**/*.ruby"
    - "actionpack/test/**/*.builder"
    - "actionpack/test/**/*.ruby"
    - "activestorage/db/migrate/**/*.rb"
    - "activestorage/db/update_migrate/**/*.rb"
    - "actionmailbox/db/migrate/**/*.rb"
    - "actiontext/db/migrate/**/*.rb"

Style/RedundantFreeze:
  Enabled: true

# Use `foo {}` not `foo{}`.
Layout/SpaceBeforeBlockBraces:
  Enabled: true

# Use `foo { bar }` not `foo {bar}`.
Layout/SpaceInsideBlockBraces:
  Enabled: true
  EnforcedStyleForEmptyBraces: space

# Use `{ a: 1 }` not `{a:1}`.
Layout/SpaceInsideHashLiteralBraces:
  Enabled: true

Layout/SpaceInsideParens:
  Enabled: true

# Check quotes usage according to lint rule below.
Style/StringLiterals:
  Enabled: false
  EnforcedStyle: double_quotes

# Detect hard tabs, no hard tabs.
#Layout/Tab:
#  Enabled: true
#  Exclude:
#    - mdm/spec/requests/mdm/ios/command/*_spec.rb # Plistベタ書きで、Tabがあるものは仕方ないので除外

# Empty lines should not have any spaces.
Layout/TrailingEmptyLines:
  Enabled: true

# No trailing whitespace.
Layout/TrailingWhitespace:
  Enabled: true

Lint/AmbiguousOperator:
  Enabled: true

Lint/AmbiguousRegexpLiteral:
  Enabled: true

Lint/ErbNewArguments:
  # Ruby 2.6 からは有効にしたほうがいい
  Enabled: false

# Use my_method(my_arg) not my_method( my_arg ) or my_method my_arg.
Lint/RequireParentheses:
  Enabled: true

Lint/RedundantStringCoercion:
  Enabled: true

Lint/ShadowingOuterLocalVariable:
  Enabled: true

Lint/UselessAssignment:
  Enabled: true

Lint/UriEscapeUnescape:
  Enabled: true

Lint/DeprecatedClassMethods:
  Enabled: true

# 変数名は必ずスネークケースを使用する。（キャメルケースは禁止する）
Naming/VariableName:
  Enabled: true

Style/ParenthesesAroundCondition:
  Enabled: true

Style/RedundantBegin:
  Enabled: true

Style/RedundantReturn:
  Enabled: true
  AllowMultipleReturnValues: true

Style/Semicolon:
  Enabled: true
  AllowAsExpressionSeparator: true

# Prefer Foo.method over Foo::method
Style/ColonMethodCall:
  Enabled: true

# [SHOULD] 複数行の配列リテラルでは、最後の要素の後ろにも,を書くこと。
Style/TrailingCommaInArrayLiteral:
  Enabled: true
  EnforcedStyleForMultiline: comma

# [SHOULD] 複数行のハッシュリテラルでは、最後の要素の後ろにも,を書くこと。
Style/TrailingCommaInHashLiteral:
  Enabled: true
  EnforcedStyleForMultiline: comma

Style/TrivialAccessors:
  Enabled: true

Performance/FlatMap:
  Enabled: true

Performance/RedundantMerge:
  Enabled: true

Performance/StartWith:
  Enabled: true

Performance/EndWith:
  Enabled: true

Performance/ReverseEach:
  Enabled: true

###################################################
### rubocop-rspec: https://rubocop-rspec.readthedocs.io/en/latest/cops/

# FactoryBotの4.11以降はdynamic attributes使うべし
FactoryBot/AttributeDefinedStatically:
  Enabled: true

# 読みやすさのため、describeやcontext同士は１行あける。
RSpec/EmptyLineAfterExampleGroup:
  Enabled: true

# 読みやすさのため、beforeやafterのあとは１行あける。
RSpec/EmptyLineAfterHook:
  Enabled: true

# bad: expect("success").to eq(result)
# good: expect(result).to eq("success")
RSpec/ExpectActual:
  Enabled: true

# bad: expect{ subject }.to change(Hoge, :count).by(1)
# good: expect{ subject }.to change{ Hoge.count }.by(1)
RSpec/ExpectChange:
  Enabled: true
  EnforcedStyle: block

# beforeでexpectするのを禁止する。
RSpec/ExpectInHook:
  Enabled: true

# expectにブロックを"変数で"渡すのを禁止する。
# good: expect{ some_operation; }.to change...
RSpec/ImplicitBlockExpectation:
  Enabled: true

# インスタンス変数はタイポしてもエラーにならないため、let, let! を使うべし。
RSpec/InstanceVariable:
  Enabled: true

# bad: it_should_behave_like
# good: it_behaves_like
RSpec/ItBehavesLike:
  Enabled: true

# グローバル空間を汚すようなクラス定義などを禁止する
# bad/goodの例は長いので https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/LeakyConstantDeclaration を参照
RSpec/LeakyConstantDeclaration:
  Enabled: true

# itの中から参照されないlet!は使わず、beforeを使うべし。
RSpec/LetSetup:
  Enabled: true

RSpec/MultipleSubjects:
  Enabled: true

RSpec/NotToNot:
  Enabled: true

RSpec/PredicateMatcher:
  Enabled: true

RSpec/ReceiveCounts:
  Enabled: true

RSpec/ReceiveNever:
  Enabled: true

RSpec/ReturnFromStub:
  Enabled: true
  EnforcedStyle: and_return

RSpec/SharedContext:
  Enabled: true

# grepしやすいよう、shared_exampleにシンボル渡しするのは禁止する。
RSpec/SharedExamples:
  Enabled: true

RSpec/SingleArgumentMessageChain:
  Enabled: true

RSpec/VoidExpect:
  Enabled: true

RSpec/Yield:
  Enabled: true

###################################################
### これより下は、できればEnableにしたいもの

# itのないdescribeやcontextはバグの可能性が高いので指摘する。
# （やむを得ない事情によりskipしているspecがたくさんあるため、一旦除外した）
RSpec/EmptyExampleGroup:
  Enabled: false

# 複数行のitで is_expected を使うのを禁止する
# （Enabledのほうが嬉しいが、なくてもそこまで苦にならないので一旦除外した）
RSpec/ImplicitSubject:
  Enabled: false
  EnforcedStyle: single_line_only

# 物語のようにcontextがネストしているものは可読性が低いため、ネストを制限する。
# (対応難易度がやや高いため、皆がRSpecに書き慣れるまで、一旦除外する)
RSpec/NestedGroups:
  Enabled: false
  Max: 4
